

from datetime import datetime
from typing import Optional, Union
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from pathlib import Path


@dataclass
class CacheEntry(ABC):
    """
    Abstract base class for cache entries with common fields.
    
    All cache entries must have source_file and created_at fields.
    Cannot be instantiated directly due to abstract to_dict method.
    """
    source_file: Path
    client: str # the client used for the call from clients_config ie: (gpt-o4-mini, gpt-4o)
    created_at: datetime = field(default_factory=datetime.now)
    tokens: Optional[int] = None
    
    def __post_init__(self):
        #manual runtime data validation cause i dont like pydantic, but same jist.
        if not isinstance(self.created_at, datetime):
            raise TypeError("created_at must be a datetime object")
        
        if not isinstance(self.source_file, Path):
            raise TypeError("source_file must be a Path object")
        
        if not isinstance(self.client, str):
            raise TypeError("client must be a string object.")
        
        if self.tokens is not None and not isinstance(self.tokens, int):
            raise TypeError("tokens must be an int object")

    @abstractmethod
    def to_dict(self) -> dict:
        """
        Convert the cache object to a dictionary.
        
        Subclasses MUST override this method and call self._get_base_dict() 
        to include base fields, then add their own fields.
        
        Returns:
            dict: Dictionary representation of the cache entry with all fields
        """
        pass
    
    def _get_base_dict(self) -> dict:
        """
        Get the base dictionary with common fields.
        
        Returns:
            dict: Dictionary with base fields (created_at, source_file, client, tokens)
        """
        return {
            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),
            'source_file': str(self.source_file),
            'client': self.client,
            'tokens': self.tokens,
        }
    

@dataclass
class SummaryCacheEntry(CacheEntry):
    """
    Cache schema for storing text summarization results.
    
    Contains the summary generated by the SummarizationClient along with
    metadata about when it was created and the source text.
    """
    summary: str = "" #have to set a default to avoid initializing blank value after defined values in parent class CacheEntry

    def __post_init__(self):
        super().__post_init__()
        if not isinstance(self.summary, str):
            raise ValueError("summary must be a str object")
        if self.summary.strip() == "":
            raise ValueError("summary cannot be empty or just whitespace")
        
    
    def to_dict(self) -> dict:
        """
        Convert the SummaryCache object to a dictionary.
        
        Returns:
            dict: Dictionary representation of the cache entry with all fields
        """
        result = super()._get_base_dict()
        result['summary'] = self.summary
        return result